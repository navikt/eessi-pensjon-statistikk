buildscript {

    ext {
        kotlinVersion = '1.6.10'
        springBootVersion = '2.6.3'
        logstashLogbackVersion = '7.0.1'
        archunitVersion = '0.11.0'              //nyere versjoner feiler på sirkulære tester
        microMeterPrometheusVersion = '1.8.2'
        epMetricsVersion = "0.4.12"
        oidcTokenSupportVersion = '1.3.9'
        epeuxVersion = '1.1.63'
        gcpStorageVersion = "2.0.1"

    }

    repositories {
        mavenCentral()

        maven {
            url "https://maven.pkg.github.com/navikt/maven-release"
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "org.owasp.dependencycheck" version "6.5.0.1"
    id 'com.adarshr.test-logger' version '3.1.0'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'no.nav.eessi.pensjon'

dependencies {

    //eessi pensjon libs
    implementation("no.nav.eessi.pensjon:ep-logging:1.0.15")
    implementation("no.nav.eessi.pensjon:ep-eux:${epeuxVersion}") {
        exclude module: 'ep-security-sts'
    }
    implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-actuator:${springBootVersion}")

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.kafka:spring-kafka'

    //aws and s3
    /*implementation 'com.amazonaws:aws-java-sdk-s3:1.12.129'*/

    //GCP
    implementation("com.google.cloud:google-cloud-storage:$gcpStorageVersion")
    implementation(platform("com.google.cloud:libraries-bom:23.0.0"))

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus:$microMeterPrometheusVersion")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    //Auth
    implementation("no.nav.security:token-client-spring:${oidcTokenSupportVersion}")
    implementation("no.nav.security:token-validation-spring:${oidcTokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${oidcTokenSupportVersion}")
    implementation("no.nav.security:token-validation-test-support:${oidcTokenSupportVersion}")


    //test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: "junit-vintage-engine"
    }
    testImplementation('io.mockk:mockk:1.12.1')
    testImplementation("com.ninja-squad:springmockk:3.0.1")

    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'io.findify:s3mock_2.13:0.2.6'
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.2")
    testImplementation("org.mock-server:mockserver-client-java:5.11.2")
    testImplementation("org.mock-server:mockserver-netty:5.11.2") {
        exclude module: 'junit'
    }

    // Architecture tests
    testImplementation ("com.tngtech.archunit:archunit:${archunitVersion}")
    //testcontainers
    testImplementation("org.testcontainers:junit-jupiter:1.14.3")
    testImplementation "org.testcontainers:testcontainers:1.16.3"



}
test {
    useJUnitPlatform()

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'
    failFast = true

}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '11'
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

repositories {

    mavenCentral()

    ["maven-release","ep-metrics", "ep-security-sts", "ep-personoppslag"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }

}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    }
    revision = 'release'
}