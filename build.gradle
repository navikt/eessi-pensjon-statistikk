buildscript {

    ext {
        kotlinVersion = '1.7.10'
        springBootVersion = '2.7.3'
        springKafkaVersion = '2.9.0'
        logstashLogbackVersion = '7.2'
        archunitVersion = '0.23.1'
        tokenSupportVersion = '2.1.3'
        epMetricsVersion = "0.5.9"
        epeuxVersion = '1.3.8'
        epLoggingVersion = '1.0.36'
    }

    repositories {
        mavenCentral()

        maven {
            url "https://maven.pkg.github.com/navikt/maven-release"
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }
        }
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.springframework.boot" version "$springBootVersion"
    id "io.spring.dependency-management" version "1.0.13.RELEASE"
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "org.owasp.dependencycheck" version "7.1.2"
    id 'com.adarshr.test-logger' version '3.2.0'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}

group = 'no.nav.eessi.pensjon'

dependencies {

    //eessi pensjon libs
    implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")
    implementation("no.nav.eessi.pensjon:ep-eux:${epeuxVersion}") {
        exclude module: 'ep-security-sts'
    }
    implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")

    // Spring-boot BOM-fil spesifiserer versjoner for Spring Boot-avhengigheter
    implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-actuator")

    // Spring Framework BOM-fil overstyrer så vi får siste patch-versjon av Spring Framework
    implementation(platform("org.springframework:spring-framework-bom:5.3.22"))

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3'

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    implementation "org.springframework.kafka:spring-kafka:$springKafkaVersion"

    //GCP
    implementation(platform("com.google.cloud:libraries-bom:26.1.0"))
    implementation("com.google.cloud:google-cloud-storage")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    //Auth
    implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")

    testImplementation("no.nav.security:token-validation-test-support:2.0.5")

    //test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: "junit-vintage-engine"
    }
    testImplementation('io.mockk:mockk:1.12.5')
    testImplementation("com.ninja-squad:springmockk:3.1.1")

    testImplementation "org.springframework.kafka:spring-kafka-test:$springKafkaVersion"
    testImplementation(platform("org.junit:junit-bom:5.9.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.mock-server:mockserver-netty:5.14.0") {
        exclude module: 'junit'
    }

    // Architecture tests
    testImplementation ("com.tngtech.archunit:archunit:${archunitVersion}")

}

test {
    useJUnitPlatform()

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    failFast = true
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
        allWarningsAsErrors = true
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
        allWarningsAsErrors = true
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

repositories {

    mavenCentral()

    ["maven-release","ep-metrics", "ep-security-sts", "ep-personoppslag"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }

}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    }
    revision = 'release'
}