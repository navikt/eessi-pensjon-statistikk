buildscript {

    ext {
        kotlinVersion = '1.4.30'
        springBootVersion = '2.3.2.RELEASE'
        logstashLogbackVersion = '6.6'
    }

    repositories {
        mavenCentral()

        maven {
            url "https://maven.pkg.github.com/navikt/maven-release"
            credentials {
                username = "token"
                password = "$System.env.GITHUB_TOKEN"
            }
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("gradle.plugin.org.openrepose:gradle-jaxb-plugin:2.5.0")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.15'
    id "org.owasp.dependencycheck" version "6.1.1"
    id 'com.adarshr.test-logger' version '2.1.1'
    id "org.sonarqube" version "2.7.1"
    id 'jacoco'
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openrepose.gradle.plugins.jaxb'

group = 'no.nav.eessi.pensjon'
version = '0.0.1-SNAPSHOT'

configurations {
    xsd
}

dependencies {

    //eessi pensjon libs
    implementation("no.nav.eessi.pensjon:ep-logging:1.0.6")
    implementation("no.nav.eessi.pensjon:ep-personoppslag:7.1.2")
    implementation("no.nav.eessi.pensjon:ep-security-sts:0.0.10")

    //pensjonsinformasjon
    xsd("no.nav.tjenestespesifikasjoner:pensjonsinformasjon-v1-tjenestespesifikasjon:1.2020.09.21-09.58-dde2f6764e92")

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-actuator:${springBootVersion}")

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.springframework.kafka:spring-kafka'

    //aws and s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.942'

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("no.nav.eessi.pensjon:ep-metrics:0.4.0")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    implementation group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'

    implementation("com.sun.xml.ws:jaxws-ri:2.3.2")
    jaxb ('org.glassfish.jaxb:jaxb-xjc:2.3.2')
    jaxb ('org.glassfish.jaxb:jaxb-runtime:2.3.2')


    //test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
        exclude module: "junit-vintage-engine"
    }
    testImplementation("io.mockk:mockk:1.10.6")

    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation("io.findify:s3mock_2.12:0.2.5")
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.1")
    testImplementation("org.mock-server:mockserver-client-java:5.11.2")
    // Next version (5.5.4) fails, should be investigated
    testImplementation("org.mock-server:mockserver-netty:5.11.2") {
        exclude module: 'junit'
    }
    // Architecture tests
    testImplementation 'com.tngtech.archunit:archunit:0.14.1'
}
test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

tasks.named("xsd-dependency-tree").configure {
    outputs.upToDateWhen { false }
}

processResources.doFirst{
    //clean xsd
    delete "${projectDir}/src/main/resources/schemas"
    delete "${projectDir}/src/main/resources/xsdtemp"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15

    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '15'
    }
}

ext.xsdTemp = "${buildDir}/xsdtemp"
ext.schemasDir = "${buildDir}/schemas"
ext.xsdArtifactName = "pensjonsinformasjon-xsd.jar"

ext.pensjonsinformasjonDir = "${schemasDir}"

task copyPensjonsinformasjonXsd(type: Copy) {
    from(configurations.xsd) {
        rename '^pensjonsinformasjon.*', 'pensjonsinformasjon-xsd.jar'
    }
    into xsdTemp
}

task copyPensjonsinformasjonXsdsFromArtifacts(type: Copy) {
    with copyPensjonsinformasjonXsd
    includeEmptyDirs = false
    from zipTree( xsdTemp + "/" + xsdArtifactName)
    include '**/*.xsd'
    into pensjonsinformasjonDir
}

jaxb {
    xsdDir = pensjonsinformasjonDir
}

copyPensjonsinformasjonXsdsFromArtifacts.dependsOn tasks["copyPensjonsinformasjonXsd"]
xjc.dependsOn tasks["copyPensjonsinformasjonXsdsFromArtifacts"]
compileKotlin.dependsOn tasks["xjc"]

sourceSets["main"].resources.srcDir(schemasDir)
sourceSets["main"].java.srcDir("${buildDir}/generated-sources/xjc")

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

repositories {

    mavenCentral()

    ["maven-release","ep-metrics", "ep-security-sts", "ep-personoppslag"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }

}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    }
    revision = 'release'
}

